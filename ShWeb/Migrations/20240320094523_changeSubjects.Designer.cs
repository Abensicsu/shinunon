// <auto-generated />
using System;
using DataModels.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ShWeb.Migrations
{
    [DbContext(typeof(SHcx))]
    [Migration("20240320094523_changeSubjects")]
    partial class changeSubjects
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataModels.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("answer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AnswerText")
                        .HasColumnType("text")
                        .HasColumnName("answer_text");

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct_answer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.HasKey("AnswerId")
                        .HasName("pk_answers");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_answers_question_id");

                    b.ToTable("answers", (string)null);
                });

            modelBuilder.Entity("DataModels.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookId"));

                    b.Property<string>("BookName")
                        .HasColumnType("text")
                        .HasColumnName("book_name");

                    b.Property<int?>("SubjeckOrder")
                        .HasColumnType("integer")
                        .HasColumnName("book_order");

                    b.Property<int>("BookType")
                        .HasColumnType("integer")
                        .HasColumnName("book_type");

                    b.Property<bool>("HasSubSubject")
                        .HasColumnType("boolean")
                        .HasColumnName("has_sub_subject");

                    b.Property<int>("SubjectNum")
                        .HasColumnType("integer")
                        .HasColumnName("subject_num");

                    b.HasKey("BookId")
                        .HasName("pk_books");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("DataModels.Models.ExamAnswer", b =>
                {
                    b.Property<int>("ExamAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("exam_answer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExamAnswerId"));

                    b.Property<int?>("AnswerId")
                        .HasColumnType("integer")
                        .HasColumnName("answer_id");

                    b.Property<int>("ExamExecutionId")
                        .HasColumnType("integer")
                        .HasColumnName("exam_execution_id");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<string>("TextAnswer")
                        .HasColumnType("text")
                        .HasColumnName("text_answer");

                    b.HasKey("ExamAnswerId")
                        .HasName("pk_exam_answers");

                    b.HasIndex("AnswerId")
                        .HasDatabaseName("ix_exam_answers_answer_id");

                    b.HasIndex("ExamExecutionId")
                        .HasDatabaseName("ix_exam_answers_exam_execution_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_exam_answers_question_id");

                    b.ToTable("exam_answers", (string)null);
                });

            modelBuilder.Entity("DataModels.Models.ExamExecution", b =>
                {
                    b.Property<int>("ExamExecutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("exam_execution_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExamExecutionId"));

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("integer")
                        .HasColumnName("correct_answers");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<int?>("PlanExamId")
                        .HasColumnType("integer")
                        .HasColumnName("plan_exam_id");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int>("QuestionsAnswered")
                        .HasColumnType("integer")
                        .HasColumnName("questions_answered");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("WrongAnswers")
                        .HasColumnType("integer")
                        .HasColumnName("wrong_answers");

                    b.HasKey("ExamExecutionId")
                        .HasName("pk_exam_executions");

                    b.HasIndex("PlanExamId")
                        .HasDatabaseName("ix_exam_executions_plan_exam_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_exam_executions_question_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_exam_executions_subject_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_exam_executions_user_id");

                    b.ToTable("exam_executions", (string)null);
                });

            modelBuilder.Entity("DataModels.Models.ForumComment", b =>
                {
                    b.Property<int>("ForumCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("forum_comment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ForumCommentId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("ForumQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("forum_question_id");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_comment_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ForumCommentId")
                        .HasName("pk_forum_comments");

                    b.HasIndex("ForumQuestionId")
                        .HasDatabaseName("ix_forum_comments_forum_question_id");

                    b.HasIndex("ParentCommentId")
                        .HasDatabaseName("ix_forum_comments_parent_comment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_forum_comments_user_id");

                    b.ToTable("forum_comments", (string)null);
                });

            modelBuilder.Entity("DataModels.Models.ForumQuestion", b =>
                {
                    b.Property<int>("ForumQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("forum_question_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ForumQuestionId"));

                    b.Property<int>("ForumQuestionType")
                        .HasColumnType("integer")
                        .HasColumnName("forum_question_type");

                    b.Property<string>("Question")
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ForumQuestionId")
                        .HasName("pk_forum_questions");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_forum_questions_subject_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_forum_questions_user_id");

                    b.ToTable("forum_questions", (string)null);
                });

            modelBuilder.Entity("DataModels.Models.PlanExam", b =>
                {
                    b.Property<int>("PlanExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("plan_exam_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlanExamId"));

                    b.Property<int>("ExamFrequency")
                        .HasColumnType("integer")
                        .HasColumnName("exam_frequency");

                    b.Property<int>("FromSubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("from_subject_id");

                    b.Property<int>("QuestionsAmount")
                        .HasColumnType("integer")
                        .HasColumnName("questions_amount");

                    b.Property<int>("SubSubjectNum")
                        .HasColumnType("integer")
                        .HasColumnName("sub_subject_num");

                    b.Property<int>("SubjectNum")
                        .HasColumnType("integer")
                        .HasColumnName("subject_num");

                    b.Property<int>("ToSubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("to_subject_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("PlanExamId")
                        .HasName("pk_plan_exams");

                    b.HasIndex("FromSubjectId")
                        .HasDatabaseName("ix_plan_exams_from_subject_id");

                    b.HasIndex("ToSubjectId")
                        .HasDatabaseName("ix_plan_exams_to_subject_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_plan_exams_user_id");

                    b.ToTable("plan_exams", (string)null);
                });

            modelBuilder.Entity("DataModels.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("QuestionText")
                        .HasColumnType("text")
                        .HasColumnName("question_text");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer")
                        .HasColumnName("question_type");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.HasKey("QuestionId")
                        .HasName("pk_questions");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_questions_subject_id");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("DataModels.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubjectId"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    b.Property<int?>("Ordinal")
                        .HasColumnType("integer")
                        .HasColumnName("ordinal");

                    b.Property<string>("SubjectName")
                        .HasColumnType("text")
                        .HasColumnName("subject_name");

                    b.HasKey("SubjectId")
                        .HasName("pk_subjects");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_subjects_book_id");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("DataModels.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DataModels.Models.Answer", b =>
                {
                    b.HasOne("DataModels.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answers_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DataModels.Models.ExamAnswer", b =>
                {
                    b.HasOne("DataModels.Models.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("fk_exam_answers_answers_answer_id");

                    b.HasOne("DataModels.Models.ExamExecution", "ExamExecution")
                        .WithMany("ExamAnswers")
                        .HasForeignKey("ExamExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_answers_exam_executions_exam_execution_id");

                    b.HasOne("DataModels.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_answers_questions_question_id");

                    b.Navigation("Answer");

                    b.Navigation("ExamExecution");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DataModels.Models.ExamExecution", b =>
                {
                    b.HasOne("DataModels.Models.PlanExam", null)
                        .WithMany("ExamExecutions")
                        .HasForeignKey("PlanExamId")
                        .HasConstraintName("fk_exam_executions_plan_exams_plan_exam_id");

                    b.HasOne("DataModels.Models.Question", "CurrentQuestion")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_executions_questions_question_id");

                    b.HasOne("DataModels.Models.Subject", "Subject")
                        .WithMany("ExamExecutions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_executions_subjects_subject_id");

                    b.HasOne("DataModels.Models.User", "User")
                        .WithMany("ExamExecutions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exam_executions_users_user_id");

                    b.Navigation("CurrentQuestion");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModels.Models.ForumComment", b =>
                {
                    b.HasOne("DataModels.Models.ForumQuestion", "ForumQuestion")
                        .WithMany("Comments")
                        .HasForeignKey("ForumQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forum_comments_forum_questions_forum_question_id");

                    b.HasOne("DataModels.Models.ForumComment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("fk_forum_comments_forum_comments_parent_comment_id");

                    b.HasOne("DataModels.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forum_comments_users_user_id");

                    b.Navigation("ForumQuestion");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModels.Models.ForumQuestion", b =>
                {
                    b.HasOne("DataModels.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_forum_questions_subjects_subject_id");

                    b.HasOne("DataModels.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_forum_questions_users_user_id");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModels.Models.PlanExam", b =>
                {
                    b.HasOne("DataModels.Models.Subject", "FromSubject")
                        .WithMany()
                        .HasForeignKey("FromSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plan_exams_subjects_from_subject_id");

                    b.HasOne("DataModels.Models.Subject", "ToSubject")
                        .WithMany()
                        .HasForeignKey("ToSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plan_exams_subjects_to_subject_id");

                    b.HasOne("DataModels.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plan_exams_users_user_id");

                    b.Navigation("FromSubject");

                    b.Navigation("ToSubject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModels.Models.Question", b =>
                {
                    b.HasOne("DataModels.Models.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_subjects_subject_id");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("DataModels.Models.Subject", b =>
                {
                    b.HasOne("DataModels.Models.Book", "Book")
                        .WithMany("Subjects")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subjects_books_book_id");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("DataModels.Models.Book", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("DataModels.Models.ExamExecution", b =>
                {
                    b.Navigation("ExamAnswers");
                });

            modelBuilder.Entity("DataModels.Models.ForumQuestion", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DataModels.Models.PlanExam", b =>
                {
                    b.Navigation("ExamExecutions");
                });

            modelBuilder.Entity("DataModels.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("DataModels.Models.Subject", b =>
                {
                    b.Navigation("ExamExecutions");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DataModels.Models.User", b =>
                {
                    b.Navigation("ExamExecutions");
                });
#pragma warning restore 612, 618
        }
    }
}

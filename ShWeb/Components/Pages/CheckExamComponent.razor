@rendermode InteractiveServer

@page "/check-exam/{examExecutionId:int}"

<PageTitle>בדיקת המבחן</PageTitle>

@inject CustomHttpClientService Http
@inject LocalStorageService LocalStorageService
@inject IJSRuntime JS
@inject NavigationManager Navigation

@using System.Text.Json
@using ShWeb.Components.BAServices
@using DataModels.Data
@using DataModels.Models

<div class="check-exam-container" dir="rtl">
    @if (examExecution != null)
    {
        @foreach (var examAnswer in examAnswers)
        {
            @if (examAnswer.BaseQuestion.QuestionType == QuestionTypeEnum.OpenQuestion && examAnswer.TextAnswer != null)
            {
                <div class="exam-answer">
                    <div class="question-number">
                        שאלה: @examAnswer.BaseQuestion.QuestionText
                    </div>
                    <div class="answer-section">
                        <div class="answer-box">
                            <strong>תשובתך:</strong>
                            <p>@examAnswer.TextAnswer</p>
                        </div>
                        <div class="answer-box correct-answer">
                            <strong>תשובה נכונה:</strong>
                            <p>@examAnswer.Answer?.AnswerText</p>
                        </div>
                    </div>
                    <div class="radio-container">
                        <label>
                            <input type="radio" name="answer_@examAnswer.ExamAnswerId" @onchange="() => SetUserMarkedCorrect(examAnswer, AnswerCorrectnessLevelEnum.Correct)" />
                            נכון
                        </label>
                        <label>
                            <input type="radio" name="answer_@examAnswer.ExamAnswerId" @onchange="() => SetUserMarkedCorrect(examAnswer, AnswerCorrectnessLevelEnum.PartiallyCorrect)" />
                            נכון חלקית
                        </label>
                        <label>
                            <input type="radio" name="answer_@examAnswer.ExamAnswerId" @onchange="() => SetUserMarkedCorrect(examAnswer, AnswerCorrectnessLevelEnum.Wrong)" />
                            שגוי
                        </label>
                    </div>
                </div>
            }
        }

        @if (shoResultsBtn)
        {
            <button class="submit-button" @onclick="getExamResults">צפייה בתוצאות</button>
        }
    }
</div>

<style>
    .check-exam-container {
        max-width: 800px;
        margin: auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .exam-answer {
        margin-bottom: 20px;
        padding: 15px;
        border: 1px solid #d6d6d6;
        border-radius: 8px;
        background-color: #ffffff;
    }

    .question-number {
        font-size: 16px;
        font-weight: bold;
        color: #003366;
        margin-bottom: 10px;
    }

    .answer-section {
        margin-top: 10px;
    }

    .answer-box {
        margin-top: 5px;
        padding: 10px;
        border: 1px solid #cccccc;
        border-radius: 4px;
        background-color: #f5f5f5;
        font-size: 14px;
        color: #333;
    }

    .radio-container {
        display: flex;
        align-items: center;
        margin-top: 15px;
    }

        .radio-container label {
            margin-left: 10px;
            font-size: 14px;
            color: #003366;
        }

        .radio-container input[type="radio"] {
            margin-right: 5px;
        }

    .submit-button {
        display: block;
        width: 100%;
        padding: 10px;
        background-color: #003366;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 20px;
    }

        .submit-button:hover {
            background-color: #003366;
        }

</style>


@code {
    [Parameter]
    public int examExecutionId { get; set; }
    public int openQuestionNum = 0;
    public bool shoResultsBtn = false;
    public ExamExecution examExecution;
    public ICollection<ExamAnswer> examAnswers;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            examExecution = await Http.GetAsync<ExamExecution>($"api/Exam/ExamExecution?ExamExecutionId={examExecutionId}");
            examAnswers = examExecution.ExamAnswers;
            openQuestionNum = examExecution.ExamAnswers.Count(answer => !string.IsNullOrEmpty(answer.TextAnswer));
            if (openQuestionNum == 0)
                getExamResults();
            else
                shoResultsBtn = true;
            StateHasChanged(); // Trigger UI update
        }
    }

    public async Task getExamResults()
    {
        checkSelectQuestions();
        examExecution.ExamAnswers = examAnswers;

        // examExecution.ExamStatus = ExamStatusEnum.Completed;
        await Http.PutAsync<ExamExecution, object>("api/Exam/ExamExecution", examExecution);

        // Navigate to Exam Results
        Navigation.NavigateTo($"/exam-results/{examExecutionId}");
    }

    public void checkSelectQuestions()
    {
        // Check correctness for all answers
        foreach (var examAnswer in examAnswers)
        {
            if (examAnswer.BaseQuestion.QuestionType == QuestionTypeEnum.SelectQuestion)
            {
                var correctAnswer = examAnswer.BaseQuestion.Answers.FirstOrDefault(a => a.IsCorrectAnswer);
                // Set AnswerCorrectnessLevel only for the user's selected answer
                if (examAnswer.Answer != null)
                {
                    // If the selected answer is correct
                    if (examAnswer.Answer.AnswerId == correctAnswer.AnswerId)
                    {
                        examAnswer.AnswerCorrectnessLevel = AnswerCorrectnessLevelEnum.Correct;
                    }
                    else
                    {
                        examAnswer.AnswerCorrectnessLevel = AnswerCorrectnessLevelEnum.Wrong;
                    }
                }
                else
                {
                    // If no answer was selected, consider it wrong
                    examAnswer.AnswerCorrectnessLevel = AnswerCorrectnessLevelEnum.Wrong;
                }
            }
        }
    }

    private void SetUserMarkedCorrect(ExamAnswer examAnswer, AnswerCorrectnessLevelEnum level)
    {
        var existingAnswer = examAnswers.FirstOrDefault(e => e.ExamAnswerId == examAnswer.ExamAnswerId);
        if (existingAnswer != null)
        {
            existingAnswer.AnswerCorrectnessLevel = level;
        }
    }
}

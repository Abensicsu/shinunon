@rendermode InteractiveServer

@page "/check-exam/{examExecutionId:int}"

@inject CustomHttpClientService Http
@inject LocalStorageService LocalStorageService
@inject IJSRuntime JS
@inject NavigationManager Navigation

@using System.Text.Json
@using ShWeb.Components.BAServices
@using DataModels.Data
@using DataModels.Models

<h3>CheckExamComponent</h3>

<div class="check-exam-container">
    @if (examExecution != null)
    {
        @foreach (var examAnswer in examAnswers)
        {
            @if (examAnswer.BaseQuestion.QuestionType == QuestionTypeEnum.OpenQuestion && examAnswer.TextAnswer != null)
            {
                <div class="exam-answer">
                    <h4 class="question-text">@examAnswer.BaseQuestion.QuestionText</h4>
                    <div class="answer-section">
                        <div class="user-answer">
                            <p class="label">Your Answer:</p>
                            <p>@examAnswer.TextAnswer</p>
                        </div>
                        <div class="correct-answer">
                            <p class="label">Correct Answer:</p>
                            <p>@examAnswer.Answer?.AnswerText</p>
                        </div>
                    </div>
                    <div class="answer-level">
                        <p>Choose your answer level:</p>
                        @foreach (AnswerCorrectnessLevelEnum level in Enum.GetValues(typeof(AnswerCorrectnessLevelEnum)))
                        {
                            <label>
                                <input type="radio" name="answer_@examAnswer.ExamAnswerId" @onchange="() => SetUserMarkedCorrect(examAnswer, level)" /> @level
                            </label>
                        }
                    </div>
                </div>
            }
        }

        if (shoResultsBtn)
        {
            <button class="submit-button" @onclick="getExamResults">Get Exam Result</button>
        }
    }
</div>

<style>
    .check-exam-container {
    max-width: 800px;
    margin: auto;
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .exam-answer {
    margin-bottom: 20px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #fff;
    }

    .question-text {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 10px;
    }

    .answer-section {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
    }

    .answer-section div {
    width: 48%;
    }

    .label {
    font-weight: bold;
    margin-bottom: 5px;
    }

    .answer-level {
    margin-top: 10px;
    }

    .submit-button {
    display: block;
    width: 100%;
    padding: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    }

    .submit-button:hover {
    background-color: #0056b3;
    }
</style>

@code {
    [Parameter]
    public int examExecutionId { get; set; }
    public int openQuestionNum = 0;
    public bool shoResultsBtn = false;
    public ExamExecution examExecution;
    public ICollection<ExamAnswer> examAnswers;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            examExecution = await Http.GetAsync<ExamExecution>($"api/Exam/ExamExecution?ExamExecutionId={examExecutionId}");
            examAnswers = examExecution.ExamAnswers;
            openQuestionNum = examExecution.ExamAnswers.Count(answer => !string.IsNullOrEmpty(answer.TextAnswer));
            if (openQuestionNum == 0)
                getExamResults();
            else
                shoResultsBtn = true;
            StateHasChanged(); // Trigger UI update
        }
    }

    public async Task getExamResults()
    {
        checkSelectQuestions();
        examExecution.ExamAnswers = examAnswers;
        // examExecution.IsReviewed = true;

        // examExecution.ExamStatus = ExamStatusEnum.Completed;
        await Http.PutAsync<ExamExecution, object>("api/Exam/ExamExecution", examExecution);

        // Navigate to Exam Results
        Navigation.NavigateTo($"/exam-results/{examExecutionId}");
    }

    public void checkSelectQuestions()
    {
        // Check correctness for all answers
        foreach (var examAnswer in examAnswers)
        {
            if (examAnswer.BaseQuestion.QuestionType == QuestionTypeEnum.SelectQuestion)
            {
                var correctAnswer = examAnswer.BaseQuestion.Answers.FirstOrDefault(a => a.IsCorrectAnswer);
                // Set AnswerCorrectnessLevel only for the user's selected answer
                if (examAnswer.Answer != null)
                {
                    // If the selected answer is correct
                    if (examAnswer.Answer.AnswerId == correctAnswer.AnswerId)
                    {
                        examAnswer.AnswerCorrectnessLevel = AnswerCorrectnessLevelEnum.Correct;
                    }
                    else
                    {
                        examAnswer.AnswerCorrectnessLevel = AnswerCorrectnessLevelEnum.Wrong;
                    }
                }
                else
                {
                    // If no answer was selected, consider it wrong
                    examAnswer.AnswerCorrectnessLevel = AnswerCorrectnessLevelEnum.Wrong;
                }
            }
        }
    }

    private void SetUserMarkedCorrect(ExamAnswer examAnswer, AnswerCorrectnessLevelEnum level)
    {
        var existingAnswer = examAnswers.FirstOrDefault(e => e.ExamAnswerId == examAnswer.ExamAnswerId);
        if (existingAnswer != null)
        {
            existingAnswer.AnswerCorrectnessLevel = level;
        }
    }
}

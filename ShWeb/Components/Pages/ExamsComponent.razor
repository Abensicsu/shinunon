@rendermode InteractiveServer

<h3>ExamsComponent</h3>
<br />

<PageTitle>Exams</PageTitle>

@page "/exams"

@inject CustomHttpClientService Http
@inject ExamExecutionService ExamExecutionService
@inject NavigationManager Navigation

@using DataModels.Data
@using DataModels.Models
@using DataModels.Services
@using System.Net.Http.Json

<div>
    <button class="btn btn-primary" @onclick="ReviewExam">Review Exam</button>
</div>

<div class="container my-5">
    <h3>Future Exams</h3>
    @if (futureExams == null)
    {
        <p>Loading...</p>
    }
    else if (futureExams.Count == 0)
    {
        <p>No future exams found.</p>
    }
    else
    {
        <ul class="list-group">
            @foreach (var exam in futureExams)
            {
                <li class="list-group-item">
                    <strong>Start time:</strong> @exam.StartTime?.ToString("dd-MM-yyyy")
                    <strong>Type:</strong> @exam.ExamType
                    <strong>Id:</strong> @exam.ExamExecutionId
                </li>
            }
        </ul>
    }

    <br />
    <h3>Daily Exams</h3>
    @if (presentExams == null)
    {
        <p>Loading...</p>
    }
    else if (presentExams.Count == 0)
    {
        <p>No daily exams found.</p>
    }
    else
    {
        <ul class="list-group">
            @foreach (var exam in presentExams)
            {
                <li class="list-group-item">
                    <strong>Start time:</strong> @exam.StartTime?.ToString("dd-MM-yyyy")
                    <strong>Type:</strong> @exam.ExamType
                    <strong>Id:</strong> @exam.ExamExecutionId

                    @if (exam.EndTime == null && DateTime.Now > exam.StartTime)
                    {
                        <button class="btn btn-primary" @onclick="@(() => TakeExam(exam.ExamExecutionId))">Start Exam</button>
                    }
                    else if (exam.EndTime != null && exam.IsReviewed != true)
                    {
                        <button class="btn btn-secondary" @onclick="@(() => CheckExam(exam.ExamExecutionId))">Check Exam</button>
                    }
                    else if (exam.EndTime != null && exam.IsReviewed == true)
                    {
                        <button class="btn btn-primary" @onclick="@(() => ViewResults(exam.ExamExecutionId))">View Results</button>
                    }
                </li>
            }
        </ul>
    }

    <br />
    <h3>Past Exams</h3>
    @if (pastExams == null)
    {
        <p>Loading...</p>
    }
    else if (pastExams.Count == 0)
    {
        <p>No past exams found.</p>
    }
    else
    {
        <ul class="list-group">
            @foreach (var exam in pastExams)
            {
                <li class="list-group-item">
                    <strong>Start time:</strong> @exam.StartTime?.ToString("dd-MM-yyyy")
                    <strong>Type:</strong> @exam.ExamType
                    <strong>Id:</strong> @exam.ExamExecutionId

                    @if (exam.EndTime == null)
                    {
                        <button class="btn btn-primary" @onclick="@(() => TakeExam(exam.ExamExecutionId))">Start Exam</button>
                    }
                    else if (exam.EndTime != null && exam.IsReviewed != true)
                    {
                        <button class="btn btn-secondary" @onclick="@(() => CheckExam(exam.ExamExecutionId))">Check Exam</button>
                    }
                    else if (exam.EndTime != null && exam.IsReviewed == true)
                    {
                        <button class="btn btn-primary" @onclick="@(() => ViewResults(exam.ExamExecutionId))">View Results</button>
                    }
                </li>
            }
        </ul>
    }
</div>

<style>
    .list-group-item {
        display: flex;
        flex-direction: row;
    }
</style>

@code {
    private User currentUser { get; set; }
    public ExamExecution examExecution;

    public List<ExamExecution> futureExams;
    public List<ExamExecution> presentExams;
    public List<ExamExecution> pastExams;

    string[] period = { "future", "present", "past" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                currentUser = await Http.GetAsync<User>("api/auth/GetCurrentUser");
                if (currentUser == null)
                {
                    Navigation.NavigateTo("/login");
                    return;
                }

                await LoadExams();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                Navigation.NavigateTo("/login");
            }
        }
    }


    private async Task LoadExams()
    {
        futureExams = await Http.GetAsync<List<ExamExecution>>($"api/Exam/GetExamsForUser?period={period[0]}");
        presentExams = await Http.GetAsync<List<ExamExecution>>($"api/Exam/GetExamsForUser?period={period[1]}");
        pastExams = await Http.GetAsync<List<ExamExecution>>($"api/Exam/GetExamsForUser?period={period[2]}");
    }

    private void TakeExam(int examExecutionId)
    {
        Navigation.NavigateTo($"/exam/{examExecutionId}");
    }

    private void ViewResults(int examExecutionId)
    {
        Navigation.NavigateTo($"/exam-results/{examExecutionId}");
    }

    private async Task CheckExam(int examExecutionId)
    {
        examExecution = await Http.GetAsync<ExamExecution>($"api/Exam/ExamExecution?ExamExecutionId={examExecutionId}");
        int openQuestionNum = examExecution.ExamAnswers.Count(answer => !string.IsNullOrEmpty(answer.TextAnswer));

        if (openQuestionNum > 0)
        {
            Navigation.NavigateTo($"/check-exam/{examExecutionId}");
        }
        else
        {
            examExecution.IsReviewed = true;
            await Http.PutAsync<ExamExecution, object>("api/Exam/ExamExecution", examExecution);
            Navigation.NavigateTo($"/exam-results/{examExecutionId}");
        }
    }

    private void ReviewExam()
    {
        Navigation.NavigateTo($"/review-exam");
    }
}

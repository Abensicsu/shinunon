@rendermode InteractiveServer

@page "/account"

<PageTitle>החשבון שלי</PageTitle>
@inject CustomHttpClientService Http
@inject NavigationManager Navigation

@using DataModels.Data
@using DataModels.Models
@using DataModels.Services
@using Newtonsoft.Json.Linq

@if (currentUser != null)
{
    <div class="form-group">
        <label for="currentUsername">שם מלא נוכחי</label>
        <input type="text" id="currentUsername" class="form-control" value="@currentUser.UserFullName" readonly />
    </div>

    <div class="form-group">
        <label for="newUsername">שם מלא חדש</label>
        <input type="text" class="form-control" @bind="changeFullNameModel.NewFullName" />
    </div>

    <button class="btn btn-primary" @onclick="HandleSubmit">שנה שם מלא</button>
    <div>
        <label>שם משתמש</label>
        <input type="email" class="form-control" value="@currentUser.Email" style="background-color: #f0f0f0; border: 1px solid #ccc;" disabled />
    </div>
}

<h3>החלפת סיסמה</h3>
<div>
    <div class="form-group">
        <label for="oldPassword">סיסמה ישנה</label>
        <input type="password" id="oldPassword" class="form-control" @bind="changePasswordModel.OldPassword" />
    </div>

    <div class="form-group">
        <label for="newPassword">סיסמה חדשה</label>
        <input type="password" id="newPassword" class="form-control" @bind="changePasswordModel.NewPassword" />
    </div>

    <div class="form-group">
        <label for="confirmNewPassword">אישור סיסמה חדשה</label>
        <input type="password" id="confirmNewPassword" class="form-control" @bind="changePasswordModel.ConfirmNewPassword" />
    </div>

    <button class="btn btn-primary" @onclick="HandleValidSubmit">שנה סיסמה</button>
</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <p class="alert alert-success mt-3">@successMessage</p>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@if (!string.IsNullOrEmpty(errorMessageUser))
{
    <div class="alert alert-danger mt-3">
        @errorMessageUser
    </div>
}

@code {
    private User currentUser;
    private UserSettings userSettings;
    private ChangePasswordRequest changePasswordModel { get; set; } = new ChangePasswordRequest();
    private ChangeUsernameRequest changeUserModel { get; set; } = new ChangeUsernameRequest();
    private ChangeFullnameRequest changeFullNameModel { get; set; } = new ChangeFullnameRequest();

    private bool isPasswordChanged = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isUsernameChanged = false;
    private string errorMessageUser = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            currentUser = await Http.GetAsync<User>("api/auth/GetCurrentUser");
            if (currentUser == null)
                Console.WriteLine("User not found.");

            userSettings = await Http.GetAsync<UserSettings>("api/Auth/GetUserSettings");
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (changePasswordModel.NewPassword != changePasswordModel.ConfirmNewPassword)
        {
            errorMessage = "הסיסמאות החדשות אינן תואמות!";
            return;
        }

        var response = await Http.PostAsync<ChangePasswordRequest, TokenResponse>("api/auth/ChangePassword", changePasswordModel);

        if (!string.IsNullOrEmpty(response.Token))
        {
            isPasswordChanged = true;
            errorMessage = string.Empty;
        }
        else
        {
            isPasswordChanged = false;
            errorMessage = "לא הצלחנו לשנות את הסיסמה. אנא נסה שוב.";
        }
    }

    private async Task HandleSubmit()
    {
        Console.WriteLine($"Trying to change full name to: {changeFullNameModel.NewFullName}");

        // בדיקה אם שם המשתמש החדש ריק
        if (string.IsNullOrWhiteSpace(changeFullNameModel.NewFullName))
        {
            errorMessageUser = "שם המשתמש לא יכול להיות ריק!";
            return;
        }

        try
        {
            // שליחה של הבקשה ל-API לשינוי שם המשתמש
            var response = await Http.PostAsync<ChangeFullnameRequest, TokenResponse>("api/auth/ChangeFullName", changeFullNameModel);

            if (response != null)
            {
                isUsernameChanged = true;
                errorMessageUser = string.Empty;
                currentUser.UserFullName = changeFullNameModel.NewFullName;
                successMessage = "שם משתמש עודכן בהצלחה!";
            }
            else
            {
                isUsernameChanged = false;
                errorMessageUser = response?.Errors != null && response.Errors.Length > 0 ? string.Join(", ", response.Errors)
                    : "לא הצלחנו לשנות את שם המשתמש. אנא נסה שוב.";

            }
        }
        catch
        {
            errorMessageUser = "התרחשה שגיאה בשרת. נסה שוב מאוחר יותר.";
        }
    }

    private class ChangeFullnameResponse
    {
        public string Message { get; set; }
        public string Errors { get; set; }
    }
}

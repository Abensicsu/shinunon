@rendermode InteractiveServer

@page "/exam-results/{examExecutionId:int}"

@inject SHcx cx
@inject CustomHttpClientService Http
@inject LocalStorageService LocalStorageService
@inject IJSRuntime JS
@inject NavigationManager Navigation

@using System.Text.Json
@using ShWeb.Components.BAServices
@using DataModels.Data
@using DataModels.Models

<h3>Exam Results</h3>

@if (examExecution != null)
{
    <div class="results-container">
        <div class="results-summary">
            <div class="summary-item incorrect">
                <span class="number">@examExecution.WrongAnswers</span>
                <span class="label">Wrong Answers</span>
            </div>
            <div class="summary-item correct">
                <span class="number">@examExecution.CorrectAnswers</span>
                <span class="label">Correct Answers</span>
            </div>
            <div class="summary-item question-qnswered">
                <span class="number">@(examExecution.QuestionsAnswered)</span>
                <span class="label">Question Answered</span>
            </div>
            <div class="summary-item success-rate">
                <span class="number">@((examExecution.CorrectAnswers * 100) / questionNum)%</span>
                <span class="label">success-rate</span>
            </div>
        </div>
        <div class="timers">
            <div class="timer">
                <span class="label">Total Time</span>
                <span class="time">@totalTime.ToString(@"hh\:mm\:ss")</span>
            </div>
            <div class="timer">
                <span class="label">End Time</span>
                <span class="time">@examExecution.EndTime.Value.TimeOfDay.ToString(@"hh\:mm\:ss")</span>

            </div>
        </div>
    </div>
    <div class="inner-exam-component">
        <InnerExamComponent Permission=false examExecutionId=examExecutionId currentQuestionIndex="0" />
    </div>
}

<style>
    .results-container {
        width: 100%;
        height: 50% display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
    }

    .results-summary {
        display: flex;
        justify-content: space-around;
        width: 100%;
        margin-bottom: 20px;
    }

    .summary-item {
        text-align: center;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .summary-item.correct {
            background-color: #e0f7fa;
        }

        .summary-item.question-qnswered {
            background-color: #ffc10752;
        }

        .summary-item.incorrect {
            background-color: #ffcdd2;
        }

        .summary-item.success-rate {
            background-color: #c8e6c9;
        }

    .number {
        font-size: 24px;
        font-weight: bold;
    }

    .label {
        font-size: 14px;
    }

    .timers {
        display: flex;
        justify-content: space-around;
        width: 100%;
        margin-bottom: 20px;
    }

    .timer {
        text-align: center;
        padding: 10px;
        border-radius: 5px;
        background-color: #f5f5f5;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .time {
        font-size: 24px;
        font-weight: bold;
    }

    .label {
        font-size: 14px;
    }

    .inner-exam-component {
        width: 30%;
        height: 50% margin-top: 10px;
        padding: 10px;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .inner-exam-component h3 {
            text-align: center;
            margin-bottom: 10px;
        }

        .inner-exam-component .exam-answer {
            margin-bottom: 10px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
        }

        .inner-exam-component .question-text {
            font-size: 15px;
            font-weight: bold;
            margin-bottom: 7px;
        }

        .inner-exam-component .answer-section {
            display: flex;
            justify-content: space-between;
            margin-bottom: 7px;
        }

            .inner-exam-component .answer-section div {
                width: 48%;
            }

        .inner-exam-component .label {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .inner-exam-component .answer-level {
            margin-top: 10px;
        }

        .inner-exam-component .submit-button {
            display: block;
            width: 100%;
            padding: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

            .inner-exam-component .submit-button:hover {
                background-color: #0056b3;
            }
</style>

@code {
    [Parameter]
    public int examExecutionId { get; set; }

    private ExamExecution examExecution;
    public ICollection<ExamAnswer> examAnswers;
    public int questionNum;
    public int i = 0;
    public TimeSpan totalTime;

    public int correctAnswersNum = 0;
    public int wrongAnswersNum = 0;
    public int openQuestionNum = 0;

    protected override async Task OnInitializedAsync()
    {
        examExecution = await Http.GetAsync<ExamExecution>($"api/Exam/ExamExecution?examExecutionId={examExecutionId}");
        examAnswers = examExecution.ExamAnswers;
        questionNum = examExecution.ExamAnswers.Count;
        totalTime = TimeSpan.Zero;
        foreach (var answer in examExecution.ExamAnswers)
        {
            totalTime = totalTime.Add(answer.TimeSpent);
        }

        // Calculate correct and wrong answers
        correctAnswersNum = examExecution.ExamAnswers.Count(ea => ea.Answer != null && ea.Answer.IsCorrectAnswer);
        wrongAnswersNum = examExecution.ExamAnswers.Count(ea => ea.Answer != null && !(ea.Answer.IsCorrectAnswer));

        examExecution.CorrectAnswers = correctAnswersNum;
        examExecution.WrongAnswers = wrongAnswersNum;
        examExecution.ExamAnswers = examAnswers;
        examExecution.QuestionsAnswered = examAnswers.Count(ea => ea.AnswerId != null);
        openQuestionNum = examAnswers.Count(ea => ea.TextAnswer != null);

        await Http.PutAsync<ExamExecution, object>("api/Exam/ExamExecution", examExecution);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await clearLocalStorage();
        }
    }

    public async Task clearLocalStorage()
    {
        await LocalStorageService.RemoveFromLocalStorageAsync("examExecution");
        await LocalStorageService.RemoveFromLocalStorageAsync("examExecutionId");
        await LocalStorageService.RemoveFromLocalStorageAsync("elapsedTime");
        await LocalStorageService.RemoveFromLocalStorageAsync("remainingTime");
        await LocalStorageService.RemoveFromLocalStorageAsync("currentQuestionIndex");
    }
}
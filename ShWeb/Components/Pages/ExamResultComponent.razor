@rendermode InteractiveServer

@page "/exam-results/{examExecutionId:int}"

@inject CustomHttpClientService Http
@inject LocalStorageService LocalStorageService
@inject IJSRuntime JS
@inject NavigationManager Navigation

@using System.Text.Json
@using DataModels.Services
@using ShWeb.Components.BAServices
@using DataModels.Data
@using DataModels.Models

<PageTitle>תוצאות מבחן</PageTitle>

@if (examExecution != null)
{
    <div class="exam-results-header">
        <h3 class="exam-title">תוצאות מבחן @examExecution.FromSubject.Book.HebrewBookName | @GetCorrectOrdinal(examExecution.FromSubject)</h3>
        <span class="exam-date">@GetHebrewDate(examExecution.StartTime)</span>
        <div class="results-container">
            @*             <div class="previous-scores-container">
 *@                @if (previousExamExecutions != null && previousExamExecutions.Any())
            {
                <div class="previous-scores-container">
                    @* <h4>ציונים קודמים</h4> *@
                    <div class="previous-scores">
                        @foreach (var previousExam in previousExamExecutions.Take(2))
                        {
                            <div class="score-item">
                                <div class="score-value">@previousExam.CachedExamScore%</div>
                                <div class="score-date">@GetHebrewDate(previousExam.StartTime)</div>
                            </div>
                        }
                    </div>
                </div>
            }
            @* </div> *@


            <!-- תוצאות המבחן -->
            <div class="results-summary">
                <div class="score">
                    <span class="percentage">@examExecution.CachedExamScore%</span>
                </div>
                <div class="answers-summary" dir="rtl">
                    <div class="answer-item correct-answers">
                        @* <span class="icon correct-icon"></span> *@
                        <span class="icon">✔</span>
                        <span class="text correct-text">@examExecution.CorrectAnswersNum</span>
                        <span class="text correct-text">@(examExecution.CorrectAnswersNum == 1 ? "תשובה נכונה" : "תשובות נכונות")</span>
                    </div>
                    <div class="answer-item partially-correct">
                        <span class="icon">🟡</span>
                        <span class="text partially-correct-text">@examExecution.PartiallyCorrectAnswersNum</span>
                        <span class="text partially-correct-text">@(examExecution.PartiallyCorrectAnswersNum == 1 ? "תשובה נכונה חלקית" : "תשובות נכונות חלקיות")</span>
                    </div>
                    <div class="answer-item incorrect-answers">
                        <span class="icon">❌</span>
                        <span class="text incorrect-text">@examExecution.WrongAnswersNum</span>
                        <span class="text incorrect-text">@(examExecution.WrongAnswersNum == 1 ? "תשובה לא נכונה" : "תשובות לא נכונות")</span>
                    </div>
                </div>
            </div>
        </div>
        @* 
        <!-- הטיימרים -->
        <div class="timers">
            <div class="timer">
                <p class="timer-label">זמן כולל</p>
                <p class="time-value">@totalTime.ToString(@"hh\:mm\:ss")</p>
            </div>
            <div class="timer">
                <p class="timer-label">זמן סיום</p>
                <p class="time-value">@examExecution?.EndTime.Value.TimeOfDay.ToString(@"hh\:mm\:ss")</p>
            </div>
        </div> *@
    </div>


    <div class="inner-exam-component">
        <InnerExamComponent Permission=false examExecutionId=examExecutionId currentQuestionIndex="0" />
    </div>
}

<style>
    .exam-results-header {
        text-align: center;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        margin: 20px auto;
        max-width: 750px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .exam-title {
        font-size: 1.5rem;
        font-weight: bold;
        color: #003366;
        margin-bottom: 20px;
    }

    .results-container {
        display: flex;
        flex-direction: row-reverse;
        justify-content: inherit;
    }

    .previous-scores-container {
        margin-top: 20px;
        text-align: center;
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin: 15px;
    }

    .previous-scores h4 {
        margin-bottom: 15px;
        font-size: 1.2rem;
        font-weight: bold;
        color: #003366;
    }

    .previous-scores {
        display: flex;
        justify-content: center;
        gap: 20px;
        flex-direction: column;
    }

    .score-item {
        text-align: center;
        font-size: 1rem;
        color: #003366;
    }

    .score-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #003366;
    }

    .score-date {
        font-size: 0.9rem;
        color: #6c757d;
    }


    .results-summary {
        display: flex;
        justify-content: space-around;
        margin-bottom: 30px;
        flex-direction: column;
    }

    .score {
        font-size: 3rem;
        font-weight: bold;
        color: #003366;
    }

    .answers-summary {
        display: flex;
        justify-content: space-around;
        gap: 20px;
    }

    .answer-item {
        text-align: center;
        font-size: 1rem;
        font-weight: bold;
        color: #003366;
    }

    .correct-answers .icon {
        color: #28a745;
    }

    .partially-correct .icon {
        color: #ffc107;
    }

    .incorrect-answers .icon {
        color: #dc3545;
    }

    .correct-text {
        color: #28a745;
    }

    .partially-correct-text {
        color: #ffc107;
    }

    .incorrect-text {
        color: #dc3545;
    }

    .correct-icon::before {
        content: "✔";
        color: #28a745; /* ירוק */
        font-size: 1.5rem;
        margin-right: 5px;
    }


    .timers {
        display: flex;
        justify-content: space-around;
        margin-top: 20px;
    }

    .timer {
        text-align: center;
        background-color: #ffffff;
        padding: 10px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        width: 45%;
    }

    .timer-label {
        font-size: 1rem;
        color: #6c757d;
        margin-bottom: 5px;
    }

    .time-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #003366;
    }

    .icon {
        font-size: 1.2rem; /* גודל הסמל */
        margin-right: 5px; /* רווח קטן מימין לסמל */
    }

</style>

@code {
    [Parameter]
    public int examExecutionId { get; set; }

    private ExamExecution examExecution;
    public ICollection<ExamAnswer> examAnswers;
    private List<ExamExecution> previousExamExecutions;
    public int questionNum;
    public double SuccessRate;
    public int i = 0;
    public TimeSpan totalTime;

    public int correctAnswersNum = 0;
    public int partiallyCorrectAnswersNum;
    public int wrongAnswersNum;
    public int openQuestionNum;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await clearLocalStorage();

                examExecution = await Http.GetAsync<ExamExecution>($"api/Exam/ExamExecution?examExecutionId={examExecutionId}");
                examAnswers = examExecution.ExamAnswers;
                questionNum = examExecution.ExamAnswers.Count;

                // Load previous exams with the same FromSubjectId and ToSubjectId
                previousExamExecutions = await Http.GetAsync<List<ExamExecution>>(
                    $"api/Exam/GetUserPreviousExams?FromSubjectId={examExecution.FromSubjectId}&ToSubjectId={examExecution.ToSubjectId}&examExecutionId={examExecutionId}");

                CalculateResults();

                // examExecution.IsReviewed = true;
                examExecution.ExamStatus = ExamStatusEnum.Completed;
                examExecution.CachedExamScore = Math.Round((examExecution.CorrectAnswersNum + (examExecution.PartiallyCorrectAnswersNum / 2.0)) * (100.00 / questionNum), 0);
                await Http.PutAsync<ExamExecution, object>("api/Exam/ExamExecution", examExecution);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                Navigation.NavigateTo("");
            }
        }
    }

    private void CalculateResults()
    {
        totalTime = TimeSpan.Zero;

        foreach (var examAnswer in examExecution.ExamAnswers)
        {
            totalTime = totalTime.Add(examAnswer.TimeSpent);

            if (examAnswer.Answer != null)
            {
                switch (examAnswer.AnswerCorrectnessLevel)
                {
                    case AnswerCorrectnessLevelEnum.Correct:
                        correctAnswersNum++;
                        break;
                    case AnswerCorrectnessLevelEnum.PartiallyCorrect:
                        partiallyCorrectAnswersNum++;
                        break;
                    case AnswerCorrectnessLevelEnum.Wrong:
                        wrongAnswersNum++;
                        break;
                }
            }

            if (!string.IsNullOrEmpty(examAnswer.TextAnswer))
            {
                openQuestionNum++;
            }
        }

        examExecution.CorrectAnswersNum = correctAnswersNum;
        examExecution.PartiallyCorrectAnswersNum = partiallyCorrectAnswersNum;
        examExecution.WrongAnswersNum = wrongAnswersNum;
        examExecution.QuestionsAnswered = examAnswers.Count(ea => ea.AnswerId != null);
    }

    public string GetCorrectOrdinal(Subject subject)
    {
        return subject.Book.BookType switch
        {
            BookTypeEnum.Chumash => $"פרק {HebrewNumberConverter.ConvertToHebrew((int)subject.Ordinal)}",
            BookTypeEnum.Neviim => $"פרק {HebrewNumberConverter.ConvertToHebrew((int)subject.Ordinal)}",
            BookTypeEnum.Ketuvim => $"פרק {HebrewNumberConverter.ConvertToHebrew((int)subject.Ordinal)}",
            BookTypeEnum.Gemara => $"דף {HebrewNumberConverter.ConvertToHebrew((int)subject.Ordinal)}",
            BookTypeEnum.Mishna => $"דף {HebrewNumberConverter.ConvertToHebrew((int)subject.Ordinal)}",
            _ => "לא ידוע"
        };
    }

    private string GetHebrewDate(DateTime? dateTime)
    {
        if (!dateTime.HasValue)
            return "תאריך לא זמין";

        // Create HebrewCalendar instance
        var hebrewCalendar = new System.Globalization.HebrewCalendar();

        // Format the date in Hebrew
        var hebrewCulture = new System.Globalization.CultureInfo("he-IL");
        hebrewCulture.DateTimeFormat.Calendar = hebrewCalendar;

        return dateTime.Value.ToString("dd MMMM yyyy", hebrewCulture);
    }


    public async Task clearLocalStorage()
    {
        await LocalStorageService.RemoveFromLocalStorageAsync($"examExecution_{examExecutionId}");
        await LocalStorageService.RemoveFromLocalStorageAsync($"examExecutionId_{examExecutionId}");
        await LocalStorageService.RemoveFromLocalStorageAsync($"elapsedTime_{examExecutionId}");
        await LocalStorageService.RemoveFromLocalStorageAsync($"remainingTime_{examExecutionId}");
        await LocalStorageService.RemoveFromLocalStorageAsync($"currentQuestionIndex_{examExecutionId}");
    }
}

@rendermode InteractiveServer

@page "/daily-exam"

<PageTitle>מבחן יומי</PageTitle>

@inject CustomHttpClientService Http
@inject NavigationManager Navigation
@inject HebrewNumberConverter HebrewNumberConverter

@using DataModels.Data
@using DataModels.Models
@using DataModels.Services

<div class="daily-exam-container" dir="rtl">

    <div class="filters">
        <!-- Input for filtering by name -->
        <input type="text" placeholder="הכנס שם מבחן" @bind="FilterName" @bind:event="oninput" />
        <!-- Input for filtering by date -->
        <input type="date" @bind="FilterDate" @bind:event="oninput" />
    </div>

    <!-- Daily Exams -->
    <div class="exam-section">
        <h3>המבחן היומי</h3>
        @if (DailyExams != null && DailyExams.Any())
        {
            @foreach (var DailyExam in DailyExams)
            {
                <div class="exam-card" @onclick="() => NavigateToExam(DailyExam)">
                    @* <span>@GetStatusInHebrew(DailyExam.ExamStatus)</span> *@
                    <span class="exam-details">@DailyExam.FromSubject.Book.HebrewBookName | @GetCorrectOrdinal(DailyExam.FromSubject)</span>
                    @* <span>@DailyExam.StartTime?.ToString("dd/MM/yyyy")</span> *@
                    <span class="exam-date">@GetHebrewDate(DailyExam.StartTime)</span>
                    @* <span class="exam-score">@DailyExam.CachedExamScore%</span> *@
                    <span class="exam-score">
                        @(DailyExam.ExamStatus == ExamStatusEnum.Completed @* || DailyExam.ExamStatus == ExamStatusEnum.WaitingForReview *@
                            ? $"{@DailyExam.CachedExamScore}%"
                            : "")
                    </span>

                    <span class="status @(DailyExam.ExamStatus == ExamStatusEnum.Completed ? "completed" :
                     DailyExam.ExamStatus == ExamStatusEnum.Partially_Completed ? "partially" :
                     DailyExam.ExamStatus == ExamStatusEnum.WaitingForReview ? "waiting-review" : "pending")">
                        @GetStatusInHebrew(DailyExam.ExamStatus)
                    </span>
                </div>
            }
        }
        else
        {
            <p>אין מבחן יומי להצגה.</p>
        }
    </div>

    <!-- Past Exams -->
    <div class="exam-section">
        <h3>מבחנים קודמים</h3>
        @if (FilteredPreviousExams != null && FilteredPreviousExams.Any())
        {
            @foreach (var exam in FilteredPreviousExams)
            {
                <div class="exam-card" @onclick="() => NavigateToExam(exam)">
                    @* <span>@GetStatusInHebrew(exam.ExamStatus)</span> *@
                    <span class="exam-details">@exam.FromSubject.Book.HebrewBookName | @GetCorrectOrdinal(exam.FromSubject)</span>
                    @* <span>@exam.StartTime?.ToString("dd/MM/yyyy")</span> *@
                    <span class="exam-date">@GetHebrewDate(exam.StartTime)</span>
                    @* <span class="exam-score">@exam.CachedExamScore%</span> *@
                    @* <span class="exam-score">@(exam.CachedExamScore > 0 ? $"{exam.CachedExamScore} %" : "")</span> *@
                    <span class="exam-score">
                        @(exam.ExamStatus == ExamStatusEnum.Completed @* || DailyExam.ExamStatus == ExamStatusEnum.WaitingForReview *@
                            ? $"{@exam.CachedExamScore}%"
                            : "")
                    </span>
                    <span class="status @(exam.ExamStatus == ExamStatusEnum.Completed ? "completed" :
                     exam.ExamStatus == ExamStatusEnum.Partially_Completed ? "partially" :
                     exam.ExamStatus == ExamStatusEnum.WaitingForReview ? "waiting-review" : "pending")">
                        @GetStatusInHebrew(exam.ExamStatus)
                    </span>
                </div>
            }
        }
        else
        {
            <p>לא נמצאו מבחנים.</p>
        }
    </div>
</div>

<style>
    .daily-exam-container {
        font-family: Arial, sans-serif;
        max-width: 900px;
        margin: 0 auto;
        background-color: #f9faff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    h2, h3 {
        color: #0d47a1;
        margin-bottom: 15px;
    }

    .filters {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        justify-content: flex-end;
    }

        .filters input {
            height: 40px;
            border: 1px solid #003366;
            border-radius: 8px;
            padding: 0 15px;
            font-size: 14px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            color: #003366
        }

            .filters input[type="date"] {
                text-align: center;
            }

            .filters input[type="text"] {
                background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="%23003366" class="bi bi-search" viewBox="0 0 16 16"><path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85zm-5.242 1.346a5.5 5.5 0 1 1 0-11 5.5 5.5 0 0 1 0 11z"/></svg>');
                background-position: 10px center; 
                background-repeat: no-repeat; 
                padding-right: 20px; 
                direction: rtl; 
                text-align: right; 
                color: #003366; 
                font-size: 14px; 
                border: 1px solid #003366; 
                border-radius: 8px; 
            }



    .exam-section {
        margin-top: 20px;
    }


    .exam-card {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px 15px;
        margin-bottom: 10px;
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        font-size: 14px;
    }

        .exam-card .status {
            flex: 0 0 15%;
            text-align: center;
            font-weight: bold;
            border-radius: 20px;
            padding: 3px 10px;
        }

        .exam-card .exam-details {
            flex: 0.4;
            text-align: right;
        }

        .exam-card .exam-date {
            flex: 0 0 20%;
            text-align: center;
            color: #ACABAB;
        }

        .exam-card .exam-score {
            flex: 0 0 10%;
            text-align: left;
            color: #333;
        }

    .status.completed {
        color: #43a047;
        background-color: #e8f5e9;
    }

    .status.partially {
        color: #fb8c00;
        background-color: #fff3e0;
    }

    .status.pending {
        color: #e53935;
        background-color: #ffebee;
    }

    .status.waiting-review {
        color: #ff9800;
        background-color: #fff3e0;
        border: 1px solid #ffcc80;
        border-radius: 20px;
        padding: 3px 10px;
        text-align: center;
    }

</style>


@code {
    private List<ExamExecution> DailyExams { get; set; }
    private List<ExamExecution> PreviousExams { get; set; } = new List<ExamExecution>();
    private List<ExamExecution> FilteredPreviousExams { get; set; } = new List<ExamExecution>();

    private DateTime? _filterDate;
    private string _filterName = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            DailyExams = await Http.GetAsync<List<ExamExecution>>("api/exam/DailyExamExecutions");
            PreviousExams = await Http.GetAsync<List<ExamExecution>>("api/exam/GetExamsForUser?period=past");
            FilteredPreviousExams = new List<ExamExecution>(PreviousExams); // Initialize filtered list
            StateHasChanged();
        }
    }

    private DateTime? FilterDate
    {
        get => _filterDate;
        set
        {
            _filterDate = value;
            ApplyFilters(); // if filter Date change
        }
    }

    private string FilterName
    {
        get => _filterName;
        set
        {
            _filterName = value;
            ApplyFilters(); // if filter Name change
        }
    }

    private void ApplyFilters()
    {
        // Filter exams based on name and date
        FilteredPreviousExams = PreviousExams
            .Where(exam =>
                (string.IsNullOrWhiteSpace(FilterName) || exam.FromSubject.Book.HebrewBookName.Contains(FilterName)) &&
                (!FilterDate.HasValue || exam.StartTime?.Date == FilterDate.Value.Date))
            .ToList();
    }

    public string GetStatusInHebrew(ExamStatusEnum status)
    {
        return status switch
        {
            ExamStatusEnum.Pending => "ממתין",
            ExamStatusEnum.Completed => "הושלם",
            ExamStatusEnum.Partially_Completed => "הושלם חלקית",
            ExamStatusEnum.WaitingForReview => "ממתין לבדיקה",
            _ => "לא ידוע"
        };
    }

    public string GetCorrectOrdinal(Subject subject)
    {
        return subject.Book.BookType switch
        {
            BookTypeEnum.Chumash => $"פרק {HebrewNumberConverter.ConvertToHebrew((int)subject.Ordinal)}",
            BookTypeEnum.Neviim => $"פרק {HebrewNumberConverter.ConvertToHebrew((int)subject.Ordinal)}",
            BookTypeEnum.Ketuvim => $"פרק {HebrewNumberConverter.ConvertToHebrew((int)subject.Ordinal)}",
            BookTypeEnum.Gemara => $"דף {HebrewNumberConverter.ConvertToHebrew((int)subject.Ordinal)}",
            BookTypeEnum.Mishna => $"דף {HebrewNumberConverter.ConvertToHebrew((int)subject.Ordinal)}",
            _ => "לא ידוע"
        };
    }

    private string GetHebrewDate(DateTime? dateTime)
    {
        if (!dateTime.HasValue)
            return "תאריך לא זמין";

        // Create HebrewCalendar instance
        var hebrewCalendar = new System.Globalization.HebrewCalendar();

        // Format the date in Hebrew
        var hebrewCulture = new System.Globalization.CultureInfo("he-IL");
        hebrewCulture.DateTimeFormat.Calendar = hebrewCalendar;

        return dateTime.Value.ToString("dd MMMM yyyy", hebrewCulture);
    }

    private void NavigateToExam(ExamExecution exam)
    {
        // Check if the exam status allows navigating to the exam or viewing results
        if (exam.ExamStatus == ExamStatusEnum.Pending || exam.ExamStatus == ExamStatusEnum.Partially_Completed)
        {
            // Navigate to the exam page if the exam is pending or partially completed
            Navigation.NavigateTo($"/exam/{exam.ExamExecutionId}");
        }
        else if (exam.ExamStatus == ExamStatusEnum.WaitingForReview)
        {
            Navigation.NavigateTo($"/check-exam/{exam.ExamExecutionId}");
        }
        else if (exam.ExamStatus == ExamStatusEnum.Completed)
        {
            // Navigate to the exam results page if the exam is completed
            Navigation.NavigateTo($"/exam-results/{exam.ExamExecutionId}");
        }
    }
}
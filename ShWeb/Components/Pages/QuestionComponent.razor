@rendermode InteractiveServer

@using DataModels.Data
@using DataModels.Models
@using Npgsql
@using System.Collections.Generic

@inject CustomHttpClientService Http
@inject NavigationManager Navigation

@page "/questions"

@if (questions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>נושא</th>
                <th>סוג שאלה</th>
                <th>שאלה</th>
                <th>פעולות</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var question in questions)
            {
                <tr>
                    <td>@question.Subject.SubjectName</td>
                    <td>@question.QuestionType</td>
                    <td>@question.QuestionText</td>
                    <td>
                        @if (question.DiscriminatorRF == "UserQuestion")
                        {
                            <button @onclick="() => EditQuestion(question)">עריכה</button>
                            @* <button @onclick="() => DeleteQuestion(question.BaseQuestionId)">מחיקה</button> *@

                            <button @onclick="() => OpenDeletePopup(question.BaseQuestionId)">מחיקה</button>

                        }
                        else
                        {
                            <button @onclick="() => EditQuestion(question)">עריכה</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button @onclick="AddQuestionBool" class="btn btn-primary">הוספת שאלה</button>

<!-- Add Question Modal -->
@* @if (addQuestionMode)
{
    <h4>הוספת שאלה</h4>

    <div>
        <label for="subject">בחר נושא:</label>
        <select id="subject" @bind="newQuestion.SubjectId">
            <option value="0">בחר</option>
            @if (subjects != null)
            {
                @foreach (var subject in subjects)
                {
                    <option value="@subject.SubjectId">@subject.SubjectName</option>
                }
            }
        </select>
    </div>

    <b>בחר סוג שאלה</b>
    <select @bind="@newQuestion.QuestionType">

        @foreach (var qType in Enum.GetValues(typeof(QuestionTypeEnum)))
        {
            <option value="@qType">@qType</option> <!-- Cast enum to int for proper binding -->
        }
    </select>

    @if (newQuestion.QuestionType == QuestionTypeEnum.OpenQuestion)
    {
        <h3>שאלה</h3>
        <input type="text" @bind="newQuestion.QuestionText" placeholder="שאלה" class="form-control" />
        <h4>תשובה נכונה:</h4>
        <textarea @bind="correctAnswerText" @oninput="HandleAnswerInput" placeholder="תשובה נכונה" class="form-control answer-textarea"></textarea>
    }
    else if (newQuestion.QuestionType == QuestionTypeEnum.SelectQuestion)
    {
        <h3>שאלה</h3>
        <input type="text" @bind="newQuestion.QuestionText" placeholder="שאלה" class="form-control" />

        <h4>תשובות</h4>

        @foreach (var answer in answers.Select((answer, index) => new { answer, index }))
        {
            <div id="answer-@answer.index" class="answer-option" @key="answer.index">
                <input type="radio" name="correctAnswer" @onclick="() => MarkCorrectAnswer(answer.index)" checked="@answer.answer.IsCorrectAnswer" />
                <input type="text" @bind="answer.answer.AnswerText" placeholder="@($"תשובה {answer.index + 1}")" class="form-control" />
            </div>
        }
    }

    <input type="text" @bind="newQuestion.Hint" placeholder="רמז" class="form-control" />


    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }

    <br />
    <button @onclick="AddQuestion" class="btn btn-primary">שמירה</button>
} *@

<!-- Add Question Modal -->
@if (addQuestionMode)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <button class="close-button" @onclick="CloseAddPopup">✖</button>
            <h4>הוספת שאלה</h4>

            <label for="subject">בחר נושא:</label>
            <select id="subject" @bind="newQuestion.SubjectId">
                <option value="0">בחר</option>
                @if (subjects != null)
                {
                    @foreach (var subject in subjects)
                    {
                        <option value="@subject.SubjectId">@subject.SubjectName</option>
                    }
                }
            </select>

            <b>בחר סוג שאלה</b>
            <select @bind="@newQuestion.QuestionType">
                @foreach (var qType in Enum.GetValues(typeof(QuestionTypeEnum)))
                {
                    <option value="@qType">@qType</option>
                }
            </select>

            @if (newQuestion.QuestionType == QuestionTypeEnum.OpenQuestion)
            {
                <h3>שאלה</h3>
                <input type="text" @bind="newQuestion.QuestionText" placeholder="שאלה" class="form-control" />
                <h4>תשובה נכונה:</h4>
                <textarea @bind="correctAnswerText" placeholder="תשובה נכונה" class="form-control answer-textarea"></textarea>
            }
            else if (newQuestion.QuestionType == QuestionTypeEnum.SelectQuestion)
            {
                <h3>שאלה</h3>
                <input type="text" @bind="newQuestion.QuestionText" placeholder="שאלה" class="form-control" />
                <h4>תשובות</h4>

                @foreach (var answer in answers.Select((answer, index) => new { answer, index }))
                {
                    <div class="answer-option">
                        <input type="radio" name="correctAnswer" @onclick="() => MarkCorrectAnswer(answer.index)" checked="@answer.answer.IsCorrectAnswer" />
                        <input type="text" @bind="answer.answer.AnswerText" placeholder="@($"תשובה {answer.index + 1}")" class="form-control" />
                    </div>
                }
            }

            <input type="text" @bind="newQuestion.Hint" placeholder="רמז" class="form-control" />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <div class="modal-actions">
                <button class="btn btn-secondary" @onclick="CloseAddPopup">ביטול</button>
                <button class="btn btn-primary" @onclick="AddQuestion">שמירה</button>
            </div>
        </div>
    </div>
}


<!-- Edit Question Modal -->
@* @if (editMode)
{
    <h4>עריכת שאלה</h4>

    <br />
    <div>
        <label for="edit-subject">בחר נושא:</label>
        <select id="edit-subject" @bind="editingQuestion.SubjectId">
            <option value="0">בחר</option>
            @if (subjects != null)
            {
                @foreach (var subject in subjects)
                {
                    <option value="@subject.SubjectId">@subject.SubjectName</option>
                }
            }
        </select>
    </div>

    <br />
    <b><h4>סוג שאלה</h4></b>
    <h2>@editingQuestion.QuestionType</h2>

    <br />
    @if (editingQuestion.QuestionType == QuestionTypeEnum.OpenQuestion)
    {
        <h3>שאלה</h3>
        <input type="text" @bind="editingQuestion.QuestionText" placeholder="שאלה" class="form-control" />
        <h4>תשובה נכונה:</h4>
        <textarea @bind="correctAnswerText" placeholder="תשובה נכונה" class="form-control answer-textarea"></textarea>
    }
    else if (editingQuestion.QuestionType == QuestionTypeEnum.SelectQuestion)
    {
        <h3>שאלה</h3>
        <input type="text" @bind="editingQuestion.QuestionText" placeholder="שאלה" class="form-control" />

        <h4>תשובות</h4>
        @foreach (var answer in answers.Select((answer, index) => new { answer, index }))
        {
            <div class="answer-option">
                <input type="radio" name="correctAnswer" @onclick="() => MarkCorrectAnswer(answer.index)" checked="@answer.answer.IsCorrectAnswer" />
                <input type="text" @bind="answer.answer.AnswerText" placeholder="@($"תשובה {answer.index + 1}")" class="form-control" />
            </div>
        }
    }

    if (!string.IsNullOrWhiteSpace(editingQuestion.Hint))
    {
        <h3>רמז</h3>
        <input type="text" @bind="editingQuestion.Hint" placeholder="רמז" class="form-control" />
    }


    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }

    <br />
    <button @onclick="SaveEditedQuestion" class="btn btn-primary">שמור שינויים</button>
} *@

<!-- Edit Question Modal -->
@if (editMode)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <button class="close-button" @onclick="CloseEditPopup">✖</button>
            <h4>עריכת שאלה</h4>

            <label>נושא</label>
            <select @bind="editingQuestion.SubjectId">
                @foreach (var subject in subjects)
                {
                    <option value="@subject.SubjectId">@subject.SubjectName</option>
                }
            </select>

            <label>סוג שאלה</label>
            <input type="text" value="@editingQuestion.QuestionType" class="form-control" disabled />

            <label>שאלה</label>
            <input type="text" @bind="editingQuestion.QuestionText" class="form-control" />

            @if (editingQuestion.QuestionType == QuestionTypeEnum.OpenQuestion)
            {
                <label>תשובה נכונה</label>
                <textarea @bind="correctAnswerText" class="form-control"></textarea>
            }
            else if (editingQuestion.QuestionType == QuestionTypeEnum.SelectQuestion)
            {
                <h3>שאלה</h3>
                <input type="text" @bind="editingQuestion.QuestionText" placeholder="שאלה" class="form-control" />

                <h4>תשובות</h4>
                @foreach (var answer in answers.Select((answer, index) => new { answer, index }))
                {
                    <div class="answer-option">
                        <input type="radio" name="correctAnswer" @onclick="() => MarkCorrectAnswer(answer.index)" checked="@answer.answer.IsCorrectAnswer" />
                        <input type="text" @bind="answer.answer.AnswerText" placeholder="@($"תשובה {answer.index + 1}")" class="form-control" />
                    </div>
                }
            }

            <label>רמז</label>
            <input type="text" @bind="editingQuestion.Hint" class="form-control" />

            <div class="modal-actions">
                <button class="btn btn-secondary" @onclick="CloseEditPopup">ביטול</button>
                <button class="btn btn-primary" @onclick="SaveEditedQuestion">שמור שינויים</button>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (deleteMode)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h4>מחיקת שאלה</h4>
            <p>האם אתה בטוח שברצונך למחוק את השאלה?</p>
            <div class="modal-actions">
                <button class="btn btn-secondary" @onclick="CloseDeletePopup">ביטול</button>
                <button class="btn btn-danger" @onclick="ConfirmDeleteQuestion">מחיקה</button>
            </div>
        </div>
    </div>
}

<style>
    .answers {
        display: flex;
        flex-direction: column;
    }

    .answer-option {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
    }

        .answer-option input[type="radio"] {
            margin-right: 8px;
        }

    .form-control {
        width: 100%;
        max-width: 400px;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        width: 30%;
        text-align: right;
        direction: rtl;
    }

    .close-button {
        position: absolute;
        top: 10px;
        left: 10px;
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
    }

    .modal-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }
</style>


@code {
    private User currentUser { get; set; }

    public BaseQuestion[] questions { get; set; }
    public UserQuestion newQuestion { get; set; } = new UserQuestion { };
    public Subject[] subjects { get; set; }
    private Subject selectedSubject { get; set; } = new Subject { };
    private string correctAnswerText { get; set; } = string.Empty;
    private List<Answer> answers { get; set; } = new List<Answer>();
    private string errorMessage = string.Empty;
    private bool isAnswerFieldFilled = false; // Track if the answer field is filled
    private UserQuestion editingQuestion { get; set; } = new UserQuestion { };
    private bool editMode = false;
    private bool addQuestionMode = false;

    private bool deleteMode = false;
    private int questionToDelete;

    private void OpenAddPopup() => addQuestionMode = true;
    private void CloseAddPopup() => addQuestionMode = false;

    private void CloseDeletePopup() => deleteMode = false;
    private void CloseEditPopup() => editMode = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                currentUser = await Http.GetAsync<User>("api/auth/GetCurrentUser");
                if (currentUser == null)
                {
                    Navigation.NavigateTo("/login");
                    return;
                }

                questions = await Http.GetAsync<BaseQuestion[]>($"api/Question/AllQuestions");
                subjects = await Http.GetAsync<Subject[]>("api/Subject/AllSubjects");
                InitializeAnswers();

                StateHasChanged(); // Trigger UI update
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                Navigation.NavigateTo("/login");
            }
        }
    }

    private void InitializeAnswers()
    {
        answers.Clear();
        for (int i = 0; i < 4; i++)
        {
            answers.Add(new Answer
                {
                    AnswerText = string.Empty,
                    IsCorrectAnswer = false
                });
        }
    }

    private void AddQuestionBool()
    {
        addQuestionMode = true;
        editMode = false;
        InitializeAnswers();
    }

    private void HandleAnswerInput(ChangeEventArgs e)
    {
        correctAnswerText = e.Value.ToString(); // Update answer text
        isAnswerFieldFilled = true; // Update typing status
    }

    private void MarkCorrectAnswer(int index)
    {
        // Set all other answers' IsCorrectAnswer to false
        for (int i = 0; i < answers.Count; i++)
        {
            answers[i].IsCorrectAnswer = (i == index);
        }
    }

    protected async Task AddQuestion()
    {
        editMode = false;

        if (newQuestion.SubjectId == 0)
        {
            errorMessage = "בחר נושא";
            return;
        }

        if (string.IsNullOrWhiteSpace(newQuestion.QuestionText) || (newQuestion.QuestionType == QuestionTypeEnum.OpenQuestion && string.IsNullOrWhiteSpace(correctAnswerText)))
        {
            errorMessage = "הכנס שאלה ותשובה";
            return;
        }

        if (string.IsNullOrWhiteSpace(newQuestion.QuestionText))
        {
            errorMessage = "הכנס שאלה ותשובות";
            return;
        }

        if (newQuestion.QuestionType == QuestionTypeEnum.SelectQuestion && answers.Count < 4)
        {
            errorMessage = "הכנס לפחות 4 תשובות";
            return;
        }

        // Check if any answer is empty, null, or whitespace
        if (newQuestion.QuestionType == QuestionTypeEnum.SelectQuestion && answers.Any(a => string.IsNullOrWhiteSpace(a.AnswerText)))
        {
            errorMessage = "מלא את כל התשובות";
            return;
        }

        // Add answers based on question type
        if (newQuestion.QuestionType == QuestionTypeEnum.OpenQuestion)
        {
            newQuestion.Answers = new List<Answer>
            {
                new Answer
                {
                    AnswerText = correctAnswerText,
                    IsCorrectAnswer = false
                }
            };
        }
        else if (newQuestion.QuestionType == QuestionTypeEnum.SelectQuestion)
        {
            // Ensure at least one correct answer is set
            var correctAnswerExists = answers.Any(a => a.IsCorrectAnswer);
            if (!correctAnswerExists)
            {
                errorMessage = "סמן את התשובה הנכונה";
                return;
            }

            newQuestion.Answers = answers; // Add all answers for Select questions
        }

        newQuestion.UserId = currentUser.Id;
        await Http.PostAsync<UserQuestion, string>("api/Question/Add", newQuestion);
        await RefreshQuestionsAndResetInputs();
        StateHasChanged(); // Trigger UI update
    }

    private async Task DeleteQuestion(int questionId)
    {
        await Http.DeleteAsync($"api/Question/Delete/{questionId}");
        await RefreshQuestionsAndResetInputs();
    }

    private async Task RefreshQuestionsAndResetInputs()
    {
        questions = await Http.GetAsync<BaseQuestion[]>($"api/Question/AllQuestions");
        newQuestion = new UserQuestion();
        editingQuestion = new UserQuestion();
        InitializeAnswers(); // Reset the answers list after adding a question
        errorMessage = string.Empty;// Reset error message if valid
        isAnswerFieldFilled = false;
        editMode = false;
        addQuestionMode = false;
    }

    private async void EditQuestion(BaseQuestion question)
    {
        editMode = true;
        addQuestionMode = false;
        InitializeAnswers();

        // Casting to UserQuestion for editing
        if (question.DiscriminatorRF == "Question")
        {
            editingQuestion = new UserQuestion
                {
                    OriginalQuestionId = question.BaseQuestionId,
                    QuestionText = question.QuestionText,
                    QuestionType = question.QuestionType,
                    SubjectId = question.Subject.SubjectId,
                    Hint = question.Hint,
                    UserId = currentUser.Id
                };
            Question questionIncludeAnswers = await Http.GetAsync<Question>($"api/Question/getQuestion?questionId={question.BaseQuestionId}");
            question.Answers = questionIncludeAnswers.Answers;
        }
        else if (question.DiscriminatorRF == "UserQuestion")
        {
            editingQuestion = new UserQuestion
                {
                    BaseQuestionId = question.BaseQuestionId,
                    QuestionText = question.QuestionText,
                    QuestionType = question.QuestionType,
                    SubjectId = question.Subject.SubjectId,
                    Hint = question.Hint,
                    UserId = currentUser.Id
                };
            UserQuestion questionIncludeAnswers = await Http.GetAsync<UserQuestion>($"api/Question/getUserQuestion?questionId={question.BaseQuestionId}");
            question.Answers = questionIncludeAnswers.Answers;
        }

        answers = question.Answers.ToList();

        correctAnswerText = editingQuestion.QuestionType == QuestionTypeEnum.OpenQuestion && answers.Any() ? answers.First().AnswerText : string.Empty;
        StateHasChanged(); // Trigger UI update
    }

    private async Task SaveEditedQuestion()
    {
        if (editingQuestion.SubjectId == 0)
        {
            errorMessage = "בחר נושא";
            return;
        }

        if (string.IsNullOrWhiteSpace(editingQuestion.QuestionText) || (editingQuestion.QuestionType == QuestionTypeEnum.OpenQuestion && string.IsNullOrWhiteSpace(correctAnswerText)))
        {
            errorMessage = "הכנס שאלה ותשובה";
            return;
        }

        if (string.IsNullOrWhiteSpace(editingQuestion.QuestionText))
        {
            errorMessage = "הכנס שאלה";
            return;
        }

        if (editingQuestion.QuestionType == QuestionTypeEnum.SelectQuestion && answers.Count < 4)
        {
            errorMessage = "הכנס לפחות 4 תשובות";
            return;
        }

        // Check if any answer is empty, null, or whitespace
        if (editingQuestion.QuestionType == QuestionTypeEnum.SelectQuestion && answers.Any(a => string.IsNullOrWhiteSpace(a.AnswerText)))
        {
            errorMessage = "הכנס את כל התשובות";
            return;
        }

        // Add answers based on question type
        if (editingQuestion.QuestionType == QuestionTypeEnum.OpenQuestion)
        {
            editingQuestion.Answers = new List<Answer>
            {
                new Answer
                {
                    AnswerText = correctAnswerText,
                    IsCorrectAnswer = false
                }
            };
        }
        else if (editingQuestion.QuestionType == QuestionTypeEnum.SelectQuestion)
        {
            // Ensure at least one correct answer is set
            var correctAnswerExists = answers.Any(a => a.IsCorrectAnswer);
            if (!correctAnswerExists)
            {
                errorMessage = "סמן את התשובה הנכונה";
                return;
            }

            editingQuestion.Answers = answers; // Add all answers for Select questions
        }

        editingQuestion.UserId = currentUser.Id;
        await Http.PutAsync<UserQuestion, string>("api/Question/Edit", editingQuestion);
        await RefreshQuestionsAndResetInputs();
    }

    private void OpenEditPopup(BaseQuestion question)
    {
        editMode = true;
        editingQuestion = (UserQuestion)question;
    }

    private void OpenDeletePopup(int questionId)
    {
        deleteMode = true;
        questionToDelete = questionId;
    }

    private async Task ConfirmDeleteQuestion()
    {
        await DeleteQuestion(questionToDelete);
        CloseDeletePopup();
    }
}

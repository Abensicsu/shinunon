@rendermode InteractiveServer

<h3>ComponentQuestion</h3>

@inject CustomHttpClientService Http

@using DataModels.Models
@using Npgsql
@using System.Collections.Generic

@page "/questions"

@if (questions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>SubjectName</th>
                <th>SubjectId</th>
                <th>QuestionId</th>
                <th>QuestionType</th>
                <th>QuestionText</th>
                <th>Base\User Question</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var question in questions)
            {
                <tr>
                    <td>@question.Subject.SubjectName</td>
                    <td>@question.Subject.SubjectId</td>
                    <td>@question.BaseQuestionId</td>
                    <td>@question.QuestionType</td>
                    <td>@question.QuestionText</td>
                    <td>@question.DiscriminatorRF</td>
                    <td>
                        @* <button @onclick="() => EditQuestion(question)">Edit</button> *@
                        <button @onclick="() => DeleteQuestion(question.BaseQuestionId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h4>Add Question</h4>
<br />

<div>
    <label for="subject">Select a subject:</label>
    <select id="subject" @onchange="OnSelectionChange">
        <option value="0">Select</option>
        @if (subjects != null)
        {
            @foreach (var subject in subjects)
            {
                <option value="@subject.SubjectId">@subject.SubjectName</option>
            }
        }
    </select>
</div>

<b>Question Text</b>
<InputText @bind="newQuestion.QuestionText" />

<b>Question Type</b>
<InputSelect @bind-Value="@newQuestion.QuestionType">
    @foreach (var qType in Enum.GetValues(typeof(QuestionTypeEnum)))
    {
        <option value="@qType">@qType</option>
    }
</InputSelect>

<b>Add Answers</b>
<br />
@if(newQuestion.QuestionType == QuestionTypeEnum.OpenQuestion)
{
    <InputTextArea ></InputTextArea>
}


<button @onclick="AddQuestion">Add</button>

@code {
    public int userId = 1;
    public BaseQuestion[] questions { get; set; }
    public UserQuestion newQuestion { get; set; } = new UserQuestion
    {
        Answers = new List<Answer>()
    };
    public Subject[] subjects { get; set; }
    private Subject selectedSubject;


    protected override async Task OnInitializedAsync()
    {
        questions = await Http.GetAsync<BaseQuestion[]>($"api/Question/AllQuestions?UserId={userId}");
        subjects = await Http.GetAsync<Subject[]>("api/Subject/AllSubjects");
    }

    protected async Task AddQuestion()
    {
        newQuestion.SubjectId = selectedSubject.SubjectId;
        newQuestion.UserId = userId;
        await Http.PostAsync<UserQuestion, string>("api/Question/Add", newQuestion);
        await RefreshQuestionsAndResetInputs();
    }

    private void OnSelectionChange(ChangeEventArgs e)
    {
        int selectedId = Convert.ToInt32(e.Value);
        selectedSubject = subjects.FirstOrDefault(s => s.SubjectId == selectedId);
    }

    private async Task RefreshQuestionsAndResetInputs()
    {
        questions = await Http.GetAsync<BaseQuestion[]>($"api/Question/AllQuestions?UserId={userId}");
        newQuestion = new UserQuestion();
    }

    private async Task DeleteQuestion(int questionId)
    {
        await Http.DeleteAsync($"api/Question/Delete/{questionId}");
        await RefreshQuestionsAndResetInputs();
    }

    private async Task EditQuestion(Question question)
    {

    }
}

@rendermode InteractiveServer

@page "/review-exam"

@inject CustomHttpClientService Http
@inject ExamExecutionService ExamExecutionService
@inject NavigationManager Navigation
@inject HebrewNumberConverter HebrewNumberConverter

@using DataModels.Data
@using DataModels.Models
@using DataModels.Services

<div class="review-container" dir="rtl">
    <!-- Steps Header -->
    <div class="stepper-container">
        <div class="step @(currentStep >= 1 ? "active" : "")" @onclick="() => GoToStep(1)">
            <div class="step-circle">@GetStepIcon(1)</div>
            <div class="step-label">סוג ספר</div>
            <!-- Display selected book type if available -->
            <small class="step-details">@(isTypeSelected ? GetBookTypeName(selectedBookType) : "")</small>
        </div>

        <div class="step @(currentStep >= 2 ? "active" : "")" @onclick="() => GoToStep(2)">
            <div class="step-circle">@GetStepIcon(2)</div>
            <div class="step-label">ספר</div>
            <!-- Display selected book name if available -->
            <small class="step-details">@(selectedBook?.HebrewBookName ?? "")</small>
        </div>

        <div class="step @(currentStep >= 3 ? "active" : "")" @onclick="() => GoToStep(3)">
            <div class="step-circle">@GetStepIcon(3)</div>
            <div class="step-label">
                @((selectedBook != null && (selectedBook.BookType == BookTypeEnum.Gemara || selectedBook.BookType == BookTypeEnum.Mishna)) ? "דפים" : "פרקים")
            </div>
            <!-- Display selected range if available -->
            <small class="step-details">@((FromChapter > 0 && ToChapter > 0 && IsSelectedChapter) ? $"{HebrewNumberConverter.ConvertToHebrew(FromChapter)} - {HebrewNumberConverter.ConvertToHebrew(ToChapter)}" : "")</small>
        </div>
    </div>

    <button class="advanced-search-btn" @onclick="ToggleAdvancedSearch">
        חיפוש מתקדם
        <span class="search-icon"></span>
    </button>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p class="error-message">@ErrorMessage</p>
    }

    @if (isAdvancedSearchVisible)
    {
        <div class="advanced-search-modal">
            <div class="advanced-search-header">
                <h3>חיפוש מתקדם לספר</h3>
                <button class="close-btn" @onclick="ToggleAdvancedSearch">✖</button>
            </div>
            <div class="advanced-search-body">
                <label>שם הספר</label>
                <input type="text" @bind="advancedSearchCriteria.BookName" @oninput="ClearErrorMessage" />

                <label>שם המחבר</label>@* @bind="advancedSearchCriteria.AuthorName" *@
                <input type="text" @oninput="ClearErrorMessage" />

                <label>פרק</label>
                <input type="number" @bind="advancedSearchCriteria.Ordinal" @oninput="ClearErrorMessage" />

                <label>תיאור</label> @* @bind="advancedSearchCriteria.Description" *@ 
                                    <textarea @oninput="ClearErrorMessage"></textarea>

                <div class="advanced-search-actions">
                    <button class="search-btn" @onclick="PerformAdvancedSearch">חיפוש</button>
                    <button class="cancel-btn" @onclick="ToggleAdvancedSearch">ביטול</button>
                </div>
            </div>
        </div>
    }

    <button class="btn btn-primary" @onclick="() => showReviewPopup = true">חזרות יזומות קודמות</button>

    @if (showReviewPopup)
    {
        <div class="popup-overlay">
            <div class="popup">
                <h3>:חזרות יזומות קודמות</h3>
                <p>בחר חזרה יזומה שתרצה להמשיך ממנה:</p>

                <ul class="review-list">
                    @foreach (var review in PastreviewExams)
                    {
                        <li @onclick="() => ContinueReview(review)">
                            @review.Book.BookName  @GetCorrectRange(review)  <br />
                        </li>
                    }
                </ul>

                <div class="popup-buttons">
                    <button class="btn btn-secondary" @onclick="() => showReviewPopup = false">❌ סגור</button>
                </div>
            </div>
        </div>
    }



    <!-- Step 1: Select Book Type -->
    @if (currentStep == 1)
    {
        <h3>בחר סוג ספר</h3>
        <div class="booktype-selection">
            @foreach (var bookType in Enum.GetValues(typeof(BookTypeEnum)).Cast<BookTypeEnum>())
            {
                <button class="booktype-btn @(selectedBookType == bookType ? "selected" : "")"
                        @onclick="() => SelectBookType(bookType)">
                    @GetBookTypeName(bookType)
                </button>
            }
        </div>
    }

    <!-- Step 2: Select Book -->
    @if (currentStep == 2)
    {
        <h3>בחר ספר</h3>
        <div class="book-selection">
            @foreach (var book in filteredBooks)
            {
                <button class="book-btn @(selectedBook == book ? "selected" : "")"
                        @onclick="() => SelectBook(book)">
                    @book.HebrewBookName
                </button>
            }
        </div>
    }

    <!-- Step 3: Select Range of Chapters -->
    @if (currentStep == 3)
    {
        <label class="toggle-switch">
            <input type="checkbox" @bind="IsSingleChapterMode" @bind:event="onchange" />
            <span class="slider"></span>
        </label>

        <p>סוג למידה: @(IsSingleChapterMode ? "פרק" : "טווח פרקים")</p>

        <h3>
            @((selectedBook != null && (selectedBook.BookType == BookTypeEnum.Gemara || selectedBook.BookType == BookTypeEnum.Mishna)) ? "בחר טווח דפים" : "בחר טווח פרקים")
        </h3>

        <!-- Chapter Grid Display -->
        <div class="chapter-selection">
            @foreach (var sub in selectedBook.Subjects.OrderBy(s => s.Ordinal))
            {
                <button class="chapter-btn @(sub.Ordinal >= FromChapter && sub.Ordinal <= ToChapter ? "selected" : "")"
                        @onclick="() => UpdateChaptersRange((int)selectedBook.Subjects.ElementAt((int)sub.Ordinal-1).Ordinal)">
                    @HebrewNumberConverter.ConvertToHebrew((int)sub.Ordinal)
                </button>
            }
        </div>
        @* 
        <!-- Chapter Grid Display -->
<div class="chapter-selection">
    {
        <button class="chapter-btn @(sub.Ordinal >= FromChapter && sub.Ordinal <= ToChapter ? "selected" : "")"
                @onclick="() => UpdateChaptersRange((int)sub.Ordinal)">
            @HebrewNumberConverter.ConvertToHebrew((int)sub.Ordinal)
        </button>
    }
</div> *@


        <!-- Start Button -->
        <button class="start-btn" @onclick="StartLearning" disabled="@(!IsChapterRangeValid())">התחל מבחן</button>
    }
</div>

<!-- CSS -->
<style>
    .review-container {
        max-width: 800px;
        margin: auto;
        text-align: center;
        color: #003366;
    }

    .advanced-search-btn {
        background-color: #003366;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: row-reverse;
        gap: 8px;
        font-weight: bold;
        transition: background-color 0.3s ease;
        place-self: anchor-center;
    }

        .advanced-search-btn:hover {
            background-color: #002855;
        }

    .error-message {
        color: #fe8686;
        font-size: 20px;
        margin-top: 10px;
        font-weight: bold;
    }


    .search-icon {
        width: 16px;
        height: 16px;
        display: inline-block;
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="%23FFFFFF" class="bi bi-search" viewBox="0 0 16 16"><path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85zm-5.242 1.346a5.5 5.5 0 1 1 0-11 5.5 5.5 0 0 1 0 11z"/></svg>');
        background-size: contain;
        background-repeat: no-repeat;
    }

    .advanced-search-modal {
        position: fixed;
        top: 56%;
        left: 58%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 20px;
        width: 400px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .advanced-search-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .advanced-search-body label {
        display: block;
        margin-top: 10px;
        font-size: 14px;
        color: #003366;
    }

    .advanced-search-body input, .advanced-search-body textarea {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-top: 5px;
        color: #003366;
        border-color: #003366;
    }

    .advanced-search-actions {
        margin-top: 15px;
        display: flex;
        justify-content: space-between;
    }

    .search-btn {
        background-color: #003366;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .cancel-btn {
        background-color: #ccc;
        color: #003366;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    /* Stepper Container */
    .stepper-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        margin: 20px auto;
        max-width: 700px;
        color: #003366;
    }

    /* Step Items */
    .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        flex: 1; /* Equal spacing */
        cursor: pointer;
        text-align: center;
    }

    .step-details {
        min-height: 20px; /* Set a fixed height */
        font-size: 12px;
        color: #666;
        margin-top: 5px;
        text-align: center;
    }

    /* Add a connecting line between steps */
    .step:not(:first-child)::after {
        content: '';
        position: absolute;
        top: 16px;
        right: -50%;
        width: 100%;
        height: 2.5px;
        background-color: lightgray;
        z-index: 1;
        transform: translateY(-50%);
    }

    /* Highlight active steps */
    .step.active:not(:first-child)::after {
        background-color: #003366; /* Highlighted line for active steps */
    }

    /* Step Circle */
    .step-circle {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        background-color: lightgray;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        z-index: 2;
    }

    /* Highlighted Step Circle */
    .step.active .step-circle {
        background-color: #003366;
    }

    /* Adjust line spacing */
    .step.active .step-details {
        margin-top: 10px;
        color: #003366;
    }

    .step-label {
        margin-top: 5px;
        color: #003366;
        font-size: 14px;
        font-weight: bold;
    }

    .booktype-selection {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 20px;
    }

    .booktype-btn {
        border: 1px solid #003366;
        color: #003366;
        border-radius: 5px;
        padding: 10px 15px;
        cursor: pointer;
        background-color: white;
        transition: all 0.3s ease;
    }

    .chapter-range-selection {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 20px;
    }

    .book-selection, .chapter-selection {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
        gap: 15px;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

    .book-btn {
        background-color: white;
        border: 1px solid #003366;
        color: #003366;
        border-radius: 5px;
        padding: 10px 15px;
        font-size: 14px;
        text-align: center;
        transition: background-color 0.3s ease, color 0.3s ease;
        cursor: pointer;
    }

        .book-btn:hover {
            background-color: #003366;
            color: white;
        }

        .book-btn.selected {
            background-color: #003366;
            color: white;
            font-weight: bold;
        }

    .start-btn {
        margin-top: 60px;
        background-color: #003366;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        cursor: pointer;
    }

        .start-btn[disabled] {
            background-color: lightgray;
            cursor: not-allowed;
        }

    .chapter-btn {
        background-color: white;
        border: 1px solid #003366;
        color: #003366;
        border-radius: 5px;
        padding: 10px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .chapter-btn:hover {
            background-color: #003366;
            color: white;
        }

        .chapter-btn.selected {
            background-color: #003366;
            color: white;
            font-weight: bold;
        }

    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 65px;
        height: 39px;
        margin-top: 10px;
    }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
        border-radius: 34px;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 31px;
            width: 31px;
            left: 5px;
            bottom: 4px;
            background-color: white;
            transition: 0.4s;
            border-radius: 50%;
        }

    input:checked + .slider {
        background-color: #003366;
    }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .popup {
        background: white;
        padding: 20px;
        border-radius: 8px;
        width: 400px;
        text-align: center;
    }

    .review-list {
        list-style: none;
        padding: 0;
    }

        .review-list li {
            cursor: pointer;
            padding: 10px;
            border-radius: 5px;
            background: #f5f5f5;
            margin: 5px 0;
        }

            .review-list li:hover {
                background: #ddd;
            }

    .popup-buttons {
        margin-top: 15px;
    }

        .popup-buttons button {
            margin-right: 10px;
        }

    .btn-primary {
        color: #fff;
        background-color: #003366;
        border-color: #003366;
        margin-top: 12px;
        margin-left: 10px;
    }
</style>

@code {
    private int currentStep = 1;

    private BookTypeEnum selectedBookType;
    private List<Book> books;
    private List<Book> filteredBooks;
    private Book selectedBook;

    private int FromChapter { get; set; } = 0;
    private int ToChapter { get; set; } = 0;

    private bool IsSelectedChapter = false;
    private bool isTypeSelected = false;

    private User currentUser;
    private UserSettings userSettings = new UserSettings();
    private string ErrorMessage { get; set; }

    private bool isAdvancedSearchVisible = false;
    private AdvancedSearchCriteria advancedSearchCriteria = new AdvancedSearchCriteria();

    private bool _isSingleChapterMode;
    private bool IsSingleChapterMode
    {
        get => _isSingleChapterMode;
        set
        {
            _isSingleChapterMode = value;
            SavePreference(); // No argument needed
        }
    }

    private List<DeliberateReview> PastreviewExams = new();
    private bool showReviewPopup = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            currentUser = await Http.GetAsync<User>("api/auth/GetCurrentUser");
            books = await Http.GetAsync<List<Book>>("api/Book/AllBooksIncludeSubjects");
            // Load user settings from API
            userSettings = await Http.GetAsync<UserSettings>("api/Auth/GetUserSettings");
            if (userSettings != null)
            {
                IsSingleChapterMode = userSettings.IsSingleChapterMode;
            }

            PastreviewExams = await Http.GetAsync<List<DeliberateReview>>($"api/Exam/GetDeliberateReviews");
        }
        else
        {
            if (books == null)
                books = await Http.GetAsync<List<Book>>("api/Book/AllBooksIncludeSubjects");
        }
    }

    private string GetStepIcon(int step)
    {
        if (currentStep == 3 && step == 3 && IsSelectedChapter)
            return currentStep >= step ? "✔" : "";
        return currentStep > step ? "✔" : "";
    }

    private void GoToStep(int step)
    {
        // Only allow going to previous steps or steps that have already been completed
        if (step <= currentStep || IsStepAvailable(step))
        {
            currentStep = step;

            // Clear chapter range when moving to a previous step
            if (step <= 3)
            {
                FromChapter = 0;
                ToChapter = 0;
                IsSelectedChapter = false;
            }

            // Clear book selection when moving to a previous step
            if (step <= 2)
            {
                selectedBook = null;
            }

            // Clear book type selection when moving to the first step
            if (step == 1)
            {
                // selectedBookType = 0; // Reset enum value to default
                isTypeSelected = false;
            }

            // Force UI refresh to update .step-details
            StateHasChanged();
        }
    }

    private bool IsStepAvailable(int step)
    {
        return step switch
        {
            2 => selectedBookType != 0, // Step 2 is available after selecting book type
            3 => selectedBook != null, // Step 3 is available after selecting a book
            _ => true
        };
    }

    private void SelectBookType(BookTypeEnum bookType)
    {
        isTypeSelected = true;
        selectedBookType = bookType;
        filteredBooks = books.Where(b => b.BookType == bookType).ToList();
        currentStep = 2;
    }

    private void SelectBook(Book book)
    {
        selectedBook = book;
        FromChapter = 1;
        ToChapter = book.Subjects.Count;
        currentStep = 3;
    }

    private void EnsureValidRange()
    {
        if (FromChapter > ToChapter)
        {
            ToChapter = FromChapter;
        }
    }

    private void ClearErrorMessage()
    {
        ErrorMessage = string.Empty;
    }

    private void ToggleAdvancedSearch()
    {
        isAdvancedSearchVisible = !isAdvancedSearchVisible;
        advancedSearchCriteria.Ordinal = 1;
        advancedSearchCriteria.BookName = string.Empty;
        // advancedSearchCriteria.Description = string.Empty;
        // advancedSearchCriteria.Ordinal = 1;
    }

    private async Task PerformAdvancedSearch()
    {

        if (advancedSearchCriteria.Ordinal > 0 && !string.IsNullOrEmpty(advancedSearchCriteria.BookName))
        {
            var results = await Http.PostAsync<AdvancedSearchCriteria, List<Book>>("api/Book/AdvancedSearch", advancedSearchCriteria);

            if (results != null && results.Count > 0)
            {
                SelectBookType(selectedBookType);
                SelectBook(results.FirstOrDefault());
                if (results.Where(b => b.Subjects.Any(s => s.Ordinal == advancedSearchCriteria.Ordinal)) != null)
                    FromChapter = ToChapter = advancedSearchCriteria.Ordinal;

                ToggleAdvancedSearch();
            }
            else
            {
                ToggleAdvancedSearch();
                ErrorMessage = "לא נמצא ספר";
                Console.WriteLine("No results found.");
            }
        }
        else
        {
            ToggleAdvancedSearch();
            ErrorMessage = "לא נמצא ספר";
            Console.WriteLine("No results found.");
        }

    }

    private async Task SavePreference()
    {
        var updatedSettings = new UserSettings
            {
                IsSingleChapterMode = IsSingleChapterMode
            };

        await Http.PutAsync<UserSettings, string>("api/Auth/UpdateUserSettings", updatedSettings);
    }

    // private async Task ContinueReview(DeliberateReview review)
    // {
    //     showReviewPopup = false;

    //     // Select the book type (depends on your existing logic)
    //     SelectBookType(review.book.BookType);

    //     // Select the book
    //     SelectBook(review.book);

    //     // Set chapter range
    //     FromChapter = review.FromSubjectId;
    //     ToChapter = review.ToSubjectId ?? review.FromSubjectId;
    // }


    public string GetCorrectRange(DeliberateReview review)
    {
        // Fetch the book information based on the review
        var book = review.Book;
        if (book == null)
            return "ספר לא נמצא";

        // Fetch total chapters/pages count
        int totalSubjects = review.Book.Subjects.Count();

        // Determine the review range
        int fromSubject = (int)review.FromSubject.Ordinal;
        int toSubject = (int)review.ToSubject.Ordinal > 0 ? (int)review.ToSubject.Ordinal : (int)review.FromSubject.Ordinal;

        // Ensure `toSubject` does not exceed the total chapters/pages
        if (toSubject > totalSubjects)
            toSubject = totalSubjects;

        // Get the correct Hebrew representation for the ordinal values
        string fromText = HebrewNumberConverter.ConvertToHebrew(fromSubject);
        string toText = HebrewNumberConverter.ConvertToHebrew(toSubject);

        // Determine the type of reference (Chapter or Page)
        string referenceType = book.BookType switch
        {
            BookTypeEnum.Chumash => "פרק",
            BookTypeEnum.Neviim => "פרק",
            BookTypeEnum.Ketuvim => "פרק",
            BookTypeEnum.Gemara => "דף",
            BookTypeEnum.Mishna => "דף",
            _ => "לא ידוע"
        };

        // Construct the correct string output
        return fromSubject == toSubject
            ? $"{book.HebrewBookName} {referenceType} {fromText}"
            : $"{book.HebrewBookName} {referenceType} {fromText}-{toText}";
    }


    private async Task ContinueReview(DeliberateReview review)
    {
        showReviewPopup = false;

        // Select the book type
        SelectBookType(review.Book.BookType);

        // Select the book
        SelectBook(review.Book);

        // Fetch the total number of chapters/pages in this book
        int totalChapters = review.Book.Subjects.Count();

        // Calculate how many chapters were covered in the last review
        var lastReviewLength = (review.ToSubject.Ordinal ?? review.FromSubject.Ordinal) - review.FromSubject.Ordinal + 1;

        // Set the new review range
        FromChapter = (int)(review.ToSubject.Ordinal.HasValue ? review.ToSubject.Ordinal + 1 : review.FromSubject.Ordinal + 1);
        ToChapter = FromChapter + (int)lastReviewLength - 1;

        // Ensure `ToChapter` does not exceed the total chapters
        if (ToChapter > totalChapters)
        {
            ToChapter = totalChapters;
        }

        // If we have reached the last chapter, set both to the last available chapter
        if (FromChapter > totalChapters)
        {
            FromChapter = totalChapters;
            ToChapter = totalChapters;
        }
    }


    private void UpdateChaptersRange(int selectedChapter)
    {
        IsSelectedChapter = true;
        // if (selectedBook != null)
        //     Console.WriteLine(selectedBook.Subjects.Count);

        if (FromChapter == selectedChapter && ToChapter == 0)
        {
            FromChapter = 0;
            return;
        }

        if (FromChapter == 0 || ToChapter != 0)
        {
            FromChapter = selectedChapter;
            ToChapter = 0;
        }
        else if (selectedChapter >= FromChapter)
        {
            ToChapter = selectedChapter;
        }
        else
        {
            ToChapter = FromChapter;
            FromChapter = selectedChapter;
        }
    }

    private bool IsChapterRangeValid()
    {
        return FromChapter > 0 && ToChapter >= FromChapter;
    }

    private async void StartLearning()
    {
        var fromSubjectId = selectedBook.Subjects.FirstOrDefault(sub => sub.Ordinal == FromChapter).SubjectId;
        var toSubjectId = selectedBook.Subjects.FirstOrDefault(sub => sub.Ordinal == ToChapter).SubjectId;
        var exam = ExamExecutionService.createExamExecutionBySubjectsAndExamType(
            currentUser.Id, fromSubjectId, toSubjectId, ExamTypeEnum.ReviewExam);

        Navigation.NavigateTo($"/exam/{exam.ExamExecutionId}");
    }

    private string GetBookTypeName(BookTypeEnum bookType) =>
    bookType switch
    {
        BookTypeEnum.Chumash => "חומש",
        BookTypeEnum.Neviim => "נביאים",
        BookTypeEnum.Ketuvim => "כתובים",
        BookTypeEnum.Gemara => "גמרא",
        BookTypeEnum.Mishna => "משנה",
        _ => "לא ידוע"
    };

    public class DeliberateReview
    {
        public int ExamExecutionId { get; set; }
        public Book Book { get; set; }
        public Subject FromSubject { get; set; }
        public Subject ToSubject { get; set; }
    }

    public class AdvancedSearchCriteria
    {
        public string BookName { get; set; }
        // public string AuthorName { get; set; }
        public int Ordinal { get; set; }
        // public string Description { get; set; }
    }
}
